TLista* intercala_lista(TLista* L1, TLista* L2) {
TLista* L3 = cria_lista();
if ((L1->info) != NULL){
L3 = insere_inicio(L3, L1->info);}
while (L1 && L2) {  
  L3 = insere_fim(L3, L1->info);
  L1 = L1->prox;
  L3 = insere_fim(L3, L2->info);
  L2 = L2->prox;
  }
}

TLista* cria_lista (void){
  return NULL;
}

TLista* insere_inicio(TLista* li, int i){
  TLista* novo = (TLista*) (malloc(sizeof(TLista));
  novo->info = i;
  novo->prox = li;
  return novo;
}

void imprime_lista (TLista* li){
    TLista* p;
for(p=li; p!= NULL; p=p->prox){
        printf("info = %d\n", p->info);
    }
}

TLista* insere_fim (TLista* li, int i) {
        TLista* novo = (TLista*) malloc(sizeof(TLista));
        novo->info = i;
        novo->prox = NULL;
        TLista* p = li;
        if (p == NULL) { //se a lista estiver vazia
        li = novo;
        }
        else {
          while (p->prox != NULL) { //encontra o ultimo elemento
               p = p->prox;
              }
              p->prox = novo;
        }
        return li;
}

TLista* inverte(TLista* li){
TLista *ant, *atual, *seg;
ant = NULL;
atual = li;
while (atual != NULL){
  seg = atual->prox;
  atual->prox = ant;
  ant = atual;
  atual = seg;
  }
  return ant;
} 

int main() {
  TLista *L1 = cria_lista();
  TLista *L2 = inverte(L1);
  return 0;
}
